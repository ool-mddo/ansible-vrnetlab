---
    - set_fact:
       topology: "{{ original_asis }}" 

    - name: "get nodered convert link"
      uri:
        url: "{{ nodered_url }}/convertlink"
        method: "POST"
        body: "{{ topology }}"
        body_format: json
      register: result_link     

    - name: "get nodered convert data"
      uri:
        url: "{{ nodered_url }}/convertif/eth"
        method: "POST"
        body: "{{ topology }}"
        body_format: json
      register: result_node

    - set_fact:
        nodes: '{{ nodes | combine( { convert_nodes : tmp_cnf_image } ) }}'
      vars:
        convert_nodes: "{{ item.node.clab }}"
        tmp_cnf_image: "{{ cnf_image | combine( {'startup-config': config_file } ) }}"
        config_file: "{{ item.node.clab }}.conf"
      when: '"Seg" not in item.node.clab'
      loop: "{{ result_node.json }}"

    - set_fact:
        nodes: '{{ nodes | combine( { convert_nodes : tmp_bridge_image } ) }}'
      vars:
        convert_nodes: "{{ item.node.clab }}"
        tmp_bridge_image: "{{ bridge_image | combine( {'startup-config': config_file } ) }}"
        config_file: "{{ item.node.clab }}.conf"
      when: '"Seg" in item.node.clab'
      loop: "{{ result_node.json }}"

    - set_fact:
        containerlab:
          name: "{{ labname }}"
          topology:
            links: "{{ result_link.json }}"
            nodes: "{{ nodes }}"
    - name:
      copy:
        dest: "{{ mddo_containerlab_file }}"
        content: "{{ containerlab | to_nice_yaml }}"

