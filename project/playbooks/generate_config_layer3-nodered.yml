---
- hosts: localhost
  vars:
    nodered_url: "http://192.168.80.2:1880"
    node_list: []
    node_dict: {}
    #convert_file: "./convert-if.yml"
    interface_ipv4_file: "./interface-ipv4.yml"

  tasks:
  - name: Include users.json
    include_vars:
      file: ./pushed_configs_mddo_network.json
      name: tmp_json
    
  - name: extract nodes list data
    set_fact:
      node_dicts:
        node : "[{{ nodes }}]"
    vars:
      query: '*.network[1].node[*]'
      nodes: >-
        {%- for node in item -%}
        {%- set if_list= [] -%}
        {%- set tp_list= node['ietf-network-topology:termination-point'] -%}
        {%- for tp in tp_list -%}
        {%- if 'mddo-topology:l3-termination-point-attributes' in tp -%}
        {%- set if_list =  if_list.append( { 'name': tp['tp-id'], 'ipv4': tp['mddo-topology:l3-termination-point-attributes']['ip-address'][0]  } ) %}
        {%- endif -%}
        {%- endfor -%}
        {%- set trashdata =  node_dict.update( { 'name': node['node-id'] , 'iflist': if_list } ) %}
        {%- if if_list -%}
        {{ node_dict }},
        {%- endif -%}
        {%- endfor -%}
    loop: "{{ tmp_json | json_query(query) }}"

  - name: generate node file
    copy:
      dest: "./node.txt"
      content: "{{ node_dicts | to_nice_yaml }}"


  - name: "get nodered convert data"
    uri:
      url: "{{ nodered_url }}/description/batfish"
      method: "GET"
    register: result_node
        
  - name: merge inout_info & convert-if
    set_fact:
      node_list: "{{ node_list + [ data ] }}"
    vars:
      data:    
        name: "{{ item.name }}"
        iflist: >-
          {%- for tmpdict in result_node.json -%}
          {%-   if ( item.name == tmpdict['node']['original'] ) -%}
          {%-     for iflist in item.iflist -%}
          {%-       for dict in tmpdict.iflist -%}
          {%-         if iflist.name in dict.original and 'ifDescr' in dict -%}
          { 'name': '{{ dict.clab }}', 'ipv4': '{{ iflist.ipv4 }}' , 'description': '{{ dict.ifDescr }}'},
          {%-         elif iflist.name in dict.original -%}
          { 'name': '{{ dict.clab }}', 'ipv4': '{{ iflist.ipv4 }}' },
          {%-         endif -%}
          {%-       endfor -%}
          {%-     endfor -%}
          {%-   endif -%}
          {%- endfor -%}               
    loop: "{{ node_dicts.node[0] }}"

  - name: generate convert-if file
    copy:
      dest: "{{ interface_ipv4_file }}"
      content: "{{ node_list | to_nice_yaml }}"

  - name: generate config
    template:
      src: crpd.j2
      dest: "{{ item.name }}_layer3.conf"
    when: '"Seg" not in item.name'
    loop: "{{ node_list }}"

  - name: generate bridge data
    set_fact:
      bridgedata: "{{ bridgedata | default([])  + [ data ] }}"
    vars:
      data:
       name: "{{ item.node.clab }}"
       iflist: >-
         {%- for dict in item.iflist -%}
         { 'name': '{{ dict.clab }}', 'description': '{{ dict.ifDescr }}'},
         {%- endfor -%}
    when: '"Seg" in item.node.clab'
    loop: "{{ result_node.json }}"
         

  - name: generate config
    template:
      src: ceos.j2
      dest: "{{ item.name }}.conf"
    when: '"Seg" in item.name'
    loop: "{{ bridgedata }}"

  - name: "get nodered convert data"
    uri:
      url: "{{ nodered_url }}/ospf_iflist/area0"
      method: "GET"
    register: result_node
        
  - name: generate config
    template:
      src: crpd_ospf.j2
      dest: "{{ item.node }}_ospf.conf"
    when: '"Seg" not in item.node'
    loop: "{{ result_node.json }}"


  - name: merge ospf-layer3
    shell: "cat {{ item.node }}_layer3.conf {{ item.node }}_ospf.conf > {{ item.node }}.conf " 
    loop: "{{ result_node.json }}"

